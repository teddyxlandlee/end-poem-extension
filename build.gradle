plugins {
    id 'dev.architectury.loom' version '1.1-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

loom {
    forge {
        mixinConfigs 'end-poem-extension.mixins.json'
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        url 'https://maven.architectury.dev'
    }
    maven {
        url 'https://maven.minecraftforge.net'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    //modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    forge "net.minecraftforge:forge:${project.forge_version}"

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    manifest {
        attributes([
                "Specification-Title"     : "end-poem-extension",
                "Specification-Vendor"    : "teddyxlandlee",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "teddyxlandlee",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

[jar, sourcesJar, remapJar, remapSourcesJar].each {
    it.configure {
        archiveAppendix.set 'forge'
    }
}

// configure the maven publication
publishing {
    publications {
        create('mavenJava', MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
